class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        #Naive-Solution
        #h={}
        #for s in strs:
            #key="".join(sorted(s))
            #in Python, a string (str) does not have a .sort() method. 
            #The sort() method exists only on mutable sequences like lists. When you call s.sort(), you’re trying to sort the string in-place, but strings are immutable and don’t support that.
            #if key not in h:
                #h[key]=[]
            #h[key].append(s)  
        #return list(h.values())
        #Complexity- O(m*nlogn)
        #HashMap
        dict=defaultdict(list) #it automatically creates a default value for a key that doesn't exist.
        for s in strs:
            count=[0]*26 #creating list of size 26 with zeros
            for c in s:
                count[ord(c)-ord('a')]+=1
            dict[tuple(count)].append(s)
        return list(dict.values())
        #Space complexity O(m*n)+O(m) Space for the output list+extra space
        #Time Complexity O(m*n)
